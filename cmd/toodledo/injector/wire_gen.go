// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/alswl/go-toodledo/cmd/toodledo/app"
	"github.com/alswl/go-toodledo/pkg/client0"
	"github.com/alswl/go-toodledo/pkg/common"
	"github.com/alswl/go-toodledo/pkg/common/logging"
	"github.com/alswl/go-toodledo/pkg/dal"
	"github.com/alswl/go-toodledo/pkg/services"
)

// Injectors from injector.go:

func InitCLIOption() (common.ToodledoCliConfig, error) {
	toodledoCliConfig, err := common.NewCliConfigFromViper()
	if err != nil {
		return common.ToodledoCliConfig{}, err
	}
	return toodledoCliConfig, nil
}

func InitCLIApp() (*app.ToodledoCLIApp, error) {
	toodledo := client0.NewToodledoClient()
	toodledoCliConfig, err := common.NewCliConfigFromViper()
	if err != nil {
		return nil, err
	}
	toodledoConfig, err := common.NewConfigFromCliConfig(toodledoCliConfig)
	if err != nil {
		return nil, err
	}
	clientAuthInfoWriter, err := client0.NewAuthFromConfig(toodledoConfig)
	if err != nil {
		return nil, err
	}
	toodledoConfigDatabase := common.NewToodledoConfigDatabaseFromToodledoCliConfig(toodledoCliConfig)
	backend, err := dal.ProvideBackend(toodledoConfigDatabase)
	if err != nil {
		return nil, err
	}
	accountService := services.NewAccountService(toodledo, clientAuthInfoWriter)
	accountExtService := services.NewAccountExtService(toodledo, clientAuthInfoWriter, backend, accountService)
	fieldLogger := logging.ProvideLogger()
	taskService := services.NewTaskService(toodledo, clientAuthInfoWriter, fieldLogger)
	folderService := services.NewFolderService(toodledo, clientAuthInfoWriter)
	contextService := services.NewContextService(toodledo, clientAuthInfoWriter)
	goalService := services.NewGoalService(toodledo, clientAuthInfoWriter)
	savedSearchService := services.NewSavedSearchService(toodledo, clientAuthInfoWriter)
	taskPersistenceExtService := services.ProvideTaskLocalExtService(taskService, accountExtService, backend)
	folderPersistenceService := services.ProvideFolderCachedService(folderService, accountExtService, backend)
	contextPersistenceService := services.ProvideContextCachedService(contextService, accountExtService, backend)
	goalPersistenceService := services.NewGoalCachedService(goalService, accountExtService, backend)
	taskRichService := services.NewTaskRichPersistenceService(taskPersistenceExtService, folderPersistenceService, contextPersistenceService, goalPersistenceService, fieldLogger)
	toodledoCLIApp := app.NewToodledoCLIApp(accountExtService, taskService, folderService, contextService, goalService, savedSearchService, taskRichService, toodledoCliConfig)
	return toodledoCLIApp, nil
}

func InitTUIApp() (*app.ToodledoTUIApp, error) {
	toodledo := client0.NewToodledoClient()
	toodledoCliConfig, err := common.NewCliConfigFromViper()
	if err != nil {
		return nil, err
	}
	toodledoConfig, err := common.NewConfigFromCliConfig(toodledoCliConfig)
	if err != nil {
		return nil, err
	}
	clientAuthInfoWriter, err := client0.NewAuthFromConfig(toodledoConfig)
	if err != nil {
		return nil, err
	}
	toodledoConfigDatabase := common.NewToodledoConfigDatabaseFromToodledoCliConfig(toodledoCliConfig)
	backend, err := dal.ProvideBackend(toodledoConfigDatabase)
	if err != nil {
		return nil, err
	}
	accountService := services.NewAccountService(toodledo, clientAuthInfoWriter)
	accountExtService := services.NewAccountExtService(toodledo, clientAuthInfoWriter, backend, accountService)
	fieldLogger := logging.ProvideLogger()
	taskService := services.NewTaskService(toodledo, clientAuthInfoWriter, fieldLogger)
	taskPersistenceExtService := services.ProvideTaskLocalExtService(taskService, accountExtService, backend)
	folderService := services.NewFolderService(toodledo, clientAuthInfoWriter)
	folderPersistenceService := services.ProvideFolderCachedService(folderService, accountExtService, backend)
	contextService := services.NewContextService(toodledo, clientAuthInfoWriter)
	contextPersistenceService := services.ProvideContextCachedService(contextService, accountExtService, backend)
	goalService := services.NewGoalService(toodledo, clientAuthInfoWriter)
	goalPersistenceService := services.NewGoalCachedService(goalService, accountExtService, backend)
	savedSearchService := services.NewSavedSearchService(toodledo, clientAuthInfoWriter)
	taskRichService := services.NewTaskRichPersistenceService(taskPersistenceExtService, folderPersistenceService, contextPersistenceService, goalPersistenceService, fieldLogger)
	settingService := services.NewSettingService(fieldLogger, backend)
	toodledoTUIApp := app.NewToodledoTUIApp(accountExtService, taskService, taskPersistenceExtService, folderService, folderPersistenceService, contextService, contextPersistenceService, goalService, goalPersistenceService, savedSearchService, taskRichService, settingService)
	return toodledoTUIApp, nil
}
