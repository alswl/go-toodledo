// Code generated by mockery v2.14.1. DO NOT EDIT.

package mockcontext

import (
	context "github.com/alswl/go-toodledo/pkg/client/context"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// GetContextsGetPhp provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetContextsGetPhp(params *context.GetContextsGetPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...context.ClientOption) (*context.GetContextsGetPhpOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *context.GetContextsGetPhpOK
	if rf, ok := ret.Get(0).(func(*context.GetContextsGetPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) *context.GetContextsGetPhpOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*context.GetContextsGetPhpOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.GetContextsGetPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostContextsAddPhp provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostContextsAddPhp(params *context.PostContextsAddPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...context.ClientOption) (*context.PostContextsAddPhpOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *context.PostContextsAddPhpOK
	if rf, ok := ret.Get(0).(func(*context.PostContextsAddPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) *context.PostContextsAddPhpOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*context.PostContextsAddPhpOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.PostContextsAddPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostContextsDeletePhp provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostContextsDeletePhp(params *context.PostContextsDeletePhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...context.ClientOption) (*context.PostContextsDeletePhpOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *context.PostContextsDeletePhpOK
	if rf, ok := ret.Get(0).(func(*context.PostContextsDeletePhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) *context.PostContextsDeletePhpOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*context.PostContextsDeletePhpOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.PostContextsDeletePhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostContextsEditPhp provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostContextsEditPhp(params *context.PostContextsEditPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...context.ClientOption) (*context.PostContextsEditPhpOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *context.PostContextsEditPhpOK
	if rf, ok := ret.Get(0).(func(*context.PostContextsEditPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) *context.PostContextsEditPhpOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*context.PostContextsEditPhpOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.PostContextsEditPhpParams, runtime.ClientAuthInfoWriter, ...context.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

type mockConstructorTestingTNewClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientService(t mockConstructorTestingTNewClientService) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
