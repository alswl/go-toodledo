// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocksyncer

import (
	models "github.com/alswl/go-toodledo/pkg/models"
	mock "github.com/stretchr/testify/mock"

	syncer "github.com/alswl/go-toodledo/pkg/syncer"

	testing "testing"
)

// Syncer2 is an autogenerated mock type for the Syncer2 type
type Syncer2 struct {
	mock.Mock
}

// Run provides a mock function with given fields: stopCh
func (_m *Syncer2) Run(stopCh chan struct{}) error {
	ret := _m.Called(stopCh)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan struct{}) error); ok {
		r0 = rf(stopCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Syncer2) Status() (syncer.SyncStatus, error) {
	ret := _m.Called()

	var r0 syncer.SyncStatus
	if rf, ok := ret.Get(0).(func() syncer.SyncStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(syncer.SyncStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: diffs, progress
func (_m *Syncer2) Sync(diffs []*syncer.SyncItem, progress syncer.Progress) (int, int, []*models.Task, error) {
	ret := _m.Called(diffs, progress)

	var r0 int
	if rf, ok := ret.Get(0).(func([]*syncer.SyncItem, syncer.Progress) int); ok {
		r0 = rf(diffs, progress)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]*syncer.SyncItem, syncer.Progress) int); ok {
		r1 = rf(diffs, progress)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 []*models.Task
	if rf, ok := ret.Get(2).(func([]*syncer.SyncItem, syncer.Progress) []*models.Task); ok {
		r2 = rf(diffs, progress)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*models.Task)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func([]*syncer.SyncItem, syncer.Progress) error); ok {
		r3 = rf(diffs, progress)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewSyncer2 creates a new instance of Syncer2. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncer2(t testing.TB) *Syncer2 {
	mock := &Syncer2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
