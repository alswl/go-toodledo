// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocksyncer

import (
	syncer "github.com/alswl/go-toodledo/pkg/syncer"
	mock "github.com/stretchr/testify/mock"
)

// Syncer is an autogenerated mock type for the Syncer type
type Syncer[T interface{}] struct {
	mock.Mock
}

// AddFun provides a mock function with given fields: item
func (_m *Syncer[T]) AddFun(item T) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFun provides a mock function with given fields: item
func (_m *Syncer[T]) DeleteFun(item T) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostEvent provides a mock function with given fields: event
func (_m *Syncer[T]) PostEvent(event syncer.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(syncer.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: stopCh
func (_m *Syncer[T]) Run(stopCh chan struct{}) error {
	ret := _m.Called(stopCh)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan struct{}) error); ok {
		r0 = rf(stopCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Syncer[T]) Status() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SubscribeStatus provides a mock function with given fields: _a0
func (_m *Syncer[T]) SubscribeStatus(_a0 func() (string, error)) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func() (string, error)) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFun provides a mock function with given fields: item
func (_m *Syncer[T]) UpdateFun(item T) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSyncer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSyncer creates a new instance of Syncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncer[T interface{}](t mockConstructorTestingTNewSyncer) *Syncer[T] {
	mock := &Syncer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
