// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockfetcher

import (
	context "context"

	fetcher "github.com/alswl/go-toodledo/pkg/fetchers"
	mock "github.com/stretchr/testify/mock"
)

// DaemonFetcher is an autogenerated mock type for the DaemonFetcher type
type DaemonFetcher struct {
	mock.Mock
}

// Notify provides a mock function with given fields:
func (_m *DaemonFetcher) Notify() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *DaemonFetcher) Start(_a0 context.Context) fetcher.StatusDescriber {
	ret := _m.Called(_a0)

	var r0 fetcher.StatusDescriber
	if rf, ok := ret.Get(0).(func(context.Context) fetcher.StatusDescriber); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fetcher.StatusDescriber)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *DaemonFetcher) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewDaemonFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewDaemonFetcher creates a new instance of DaemonFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDaemonFetcher(t mockConstructorTestingTNewDaemonFetcher) *DaemonFetcher {
	mock := &DaemonFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
