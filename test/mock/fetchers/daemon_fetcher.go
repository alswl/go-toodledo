// Code generated by mockery v2.16.0. DO NOT EDIT.

package mockfetchers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DaemonFetcher is an autogenerated mock type for the DaemonFetcher type
type DaemonFetcher struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: isHardRefresh
func (_m *DaemonFetcher) Fetch(isHardRefresh bool) error {
	ret := _m.Called(isHardRefresh)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(isHardRefresh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notify provides a mock function with given fields: isHardRefresh
func (_m *DaemonFetcher) Notify(isHardRefresh bool) (chan bool, error) {
	ret := _m.Called(isHardRefresh)

	var r0 chan bool
	if rf, ok := ret.Get(0).(func(bool) chan bool); ok {
		r0 = rf(isHardRefresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(isHardRefresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0
func (_m *DaemonFetcher) Start(_a0 context.Context) {
	_m.Called(_a0)
}

// Stop provides a mock function with given fields:
func (_m *DaemonFetcher) Stop() {
	_m.Called()
}

// UIRefresh provides a mock function with given fields:
func (_m *DaemonFetcher) UIRefresh() chan bool {
	ret := _m.Called()

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

type mockConstructorTestingTNewDaemonFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewDaemonFetcher creates a new instance of DaemonFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDaemonFetcher(t mockConstructorTestingTNewDaemonFetcher) *DaemonFetcher {
	mock := &DaemonFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
