// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocktoodledo

import (
	context "context"

	models "github.com/alswl/go-toodledo/pkg/toodledo/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	toodledo "github.com/alswl/go-toodledo/pkg/toodledo"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, taskAdds
func (_m *TaskService) Add(ctx context.Context, taskAdds []models.TaskAdd) (models.Task, toodledo.Response, error) {
	ret := _m.Called(ctx, taskAdds)

	var r0 models.Task
	if rf, ok := ret.Get(0).(func(context.Context, []models.TaskAdd) models.Task); ok {
		r0 = rf(ctx, taskAdds)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	var r1 toodledo.Response
	if rf, ok := ret.Get(1).(func(context.Context, []models.TaskAdd) toodledo.Response); ok {
		r1 = rf(ctx, taskAdds)
	} else {
		r1 = ret.Get(1).(toodledo.Response)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []models.TaskAdd) error); ok {
		r2 = rf(ctx, taskAdds)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: ctx, after
func (_m *TaskService) Delete(ctx context.Context, after time.Time) (toodledo.Response, error) {
	ret := _m.Called(ctx, after)

	var r0 toodledo.Response
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) toodledo.Response); ok {
		r0 = rf(ctx, after)
	} else {
		r0 = ret.Get(0).(toodledo.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, after)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: ctx, id, name, private
func (_m *TaskService) Edit(ctx context.Context, id int, name string, private bool) (models.Task, toodledo.Response, error) {
	ret := _m.Called(ctx, id, name, private)

	var r0 models.Task
	if rf, ok := ret.Get(0).(func(context.Context, int, string, bool) models.Task); ok {
		r0 = rf(ctx, id, name, private)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	var r1 toodledo.Response
	if rf, ok := ret.Get(1).(func(context.Context, int, string, bool) toodledo.Response); ok {
		r1 = rf(ctx, id, name, private)
	} else {
		r1 = ret.Get(1).(toodledo.Response)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, string, bool) error); ok {
		r2 = rf(ctx, id, name, private)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: ctx, id
func (_m *TaskService) GetById(ctx context.Context, id int) (models.Task, toodledo.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Task
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	var r1 toodledo.Response
	if rf, ok := ret.Get(1).(func(context.Context, int) toodledo.Response); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(toodledo.Response)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDeleted provides a mock function with given fields: ctx
func (_m *TaskService) GetDeleted(ctx context.Context) ([]models.Task, toodledo.Response, error) {
	ret := _m.Called(ctx)

	var r0 []models.Task
	if rf, ok := ret.Get(0).(func(context.Context) []models.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	var r1 toodledo.Response
	if rf, ok := ret.Get(1).(func(context.Context) toodledo.Response); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(toodledo.Response)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Query provides a mock function with given fields: ctx, query
func (_m *TaskService) Query(ctx context.Context, query models.TaskQuery) ([]models.Task, toodledo.Response, error) {
	ret := _m.Called(ctx, query)

	var r0 []models.Task
	if rf, ok := ret.Get(0).(func(context.Context, models.TaskQuery) []models.Task); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	var r1 toodledo.Response
	if rf, ok := ret.Get(1).(func(context.Context, models.TaskQuery) toodledo.Response); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(toodledo.Response)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, models.TaskQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
