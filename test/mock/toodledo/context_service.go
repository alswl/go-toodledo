// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocktoodledo

import (
	http "net/http"

	models "github.com/alswl/go-toodledo/pkg/toodledo/models"
	mock "github.com/stretchr/testify/mock"
)

// ContextService is an autogenerated mock type for the ContextService type
type ContextService struct {
	mock.Mock
}

// Add provides a mock function with given fields: name
func (_m *ContextService) Add(name string) (models.Context, *http.Response, string, error) {
	ret := _m.Called(name)

	var r0 models.Context
	if rf, ok := ret.Get(0).(func(string) models.Context); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Context)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(string) *http.Response); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(name)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// AddExtend provides a mock function with given fields: name, private
func (_m *ContextService) AddExtend(name string, private bool) (models.Context, *http.Response, string, error) {
	ret := _m.Called(name, private)

	var r0 models.Context
	if rf, ok := ret.Get(0).(func(string, bool) models.Context); ok {
		r0 = rf(name, private)
	} else {
		r0 = ret.Get(0).(models.Context)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(string, bool) *http.Response); ok {
		r1 = rf(name, private)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, bool) string); ok {
		r2 = rf(name, private)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, bool) error); ok {
		r3 = rf(name, private)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Delete provides a mock function with given fields: id
func (_m *ContextService) Delete(id int) (*http.Response, string, error) {
	ret := _m.Called(id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(int) *http.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Edit provides a mock function with given fields: id, name
func (_m *ContextService) Edit(id int, name string) (models.Context, *http.Response, string, error) {
	ret := _m.Called(id, name)

	var r0 models.Context
	if rf, ok := ret.Get(0).(func(int, string) models.Context); ok {
		r0 = rf(id, name)
	} else {
		r0 = ret.Get(0).(models.Context)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(int, string) *http.Response); ok {
		r1 = rf(id, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(int, string) string); ok {
		r2 = rf(id, name)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(int, string) error); ok {
		r3 = rf(id, name)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// EditExtend provides a mock function with given fields: id, name, private
func (_m *ContextService) EditExtend(id int, name string, private bool) (models.Context, *http.Response, string, error) {
	ret := _m.Called(id, name, private)

	var r0 models.Context
	if rf, ok := ret.Get(0).(func(int, string, bool) models.Context); ok {
		r0 = rf(id, name, private)
	} else {
		r0 = ret.Get(0).(models.Context)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(int, string, bool) *http.Response); ok {
		r1 = rf(id, name, private)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(int, string, bool) string); ok {
		r2 = rf(id, name, private)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(int, string, bool) error); ok {
		r3 = rf(id, name, private)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Get provides a mock function with given fields:
func (_m *ContextService) Get() ([]models.Context, *http.Response, string, error) {
	ret := _m.Called()

	var r0 []models.Context
	if rf, ok := ret.Get(0).(func() []models.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Context)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func() *http.Response); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 string
	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
