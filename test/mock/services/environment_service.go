// Code generated by mockery v2.12.2. DO NOT EDIT.

package mockservices

import (
	models "github.com/alswl/go-toodledo/pkg/models"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// EnvironmentService is an autogenerated mock type for the EnvironmentService type
type EnvironmentService struct {
	mock.Mock
}

// ListAll provides a mock function with given fields:
func (_m *EnvironmentService) ListAll() ([]*models.EnvironmentWithKey, error) {
	ret := _m.Called()

	var r0 []*models.EnvironmentWithKey
	if rf, ok := ret.Get(0).(func() []*models.EnvironmentWithKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.EnvironmentWithKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllKeys provides a mock function with given fields:
func (_m *EnvironmentService) ListAllKeys() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEnvironmentService creates a new instance of EnvironmentService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewEnvironmentService(t testing.TB) *EnvironmentService {
	mock := &EnvironmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
