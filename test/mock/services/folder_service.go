// Code generated by mockery v2.9.4. DO NOT EDIT.

package mockservices

import (
	models "github.com/alswl/go-toodledo/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// FolderService is an autogenerated mock type for the FolderService type
type FolderService struct {
	mock.Mock
}

// ArchiveFolder provides a mock function with given fields: id, isArchived
func (_m *FolderService) ArchiveFolder(id int, isArchived bool) (*models.Folder, error) {
	ret := _m.Called(id, isArchived)

	var r0 *models.Folder
	if rf, ok := ret.Get(0).(func(int, bool) *models.Folder); ok {
		r0 = rf(id, isArchived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(id, isArchived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *FolderService) FindByName(name string) (*models.Folder, error) {
	ret := _m.Called(name)

	var r0 *models.Folder
	if rf, ok := ret.Get(0).(func(string) *models.Folder); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *FolderService) ListAll() ([]*models.Folder, error) {
	ret := _m.Called()

	var r0 []*models.Folder
	if rf, ok := ret.Get(0).(func() []*models.Folder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
