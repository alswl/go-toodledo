// Code generated by mockery v2.9.4. DO NOT EDIT.

package mockservices

import (
	models "github.com/alswl/go-toodledo/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// GoalService is an autogenerated mock type for the GoalService type
type GoalService struct {
	mock.Mock
}

// ArchiveGoal provides a mock function with given fields: id, isArchived
func (_m *GoalService) Archive(id int, isArchived bool) (*models.Goal, error) {
	ret := _m.Called(id, isArchived)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(int, bool) *models.Goal); ok {
		r0 = rf(id, isArchived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(id, isArchived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: name
func (_m *GoalService) Create(name string) (*models.Goal, error) {
	ret := _m.Called(name)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(string) *models.Goal); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *GoalService) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindGoalByName provides a mock function with given fields: name
func (_m *GoalService) FindByName(name string) (*models.Goal, error) {
	ret := _m.Called(name)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(string) *models.Goal); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *GoalService) ListAll() ([]*models.Goal, error) {
	ret := _m.Called()

	var r0 []*models.Goal
	if rf, ok := ret.Get(0).(func() []*models.Goal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rename provides a mock function with given fields: id, newName
func (_m *GoalService) Rename(id int64, newName string) (*models.Goal, error) {
	ret := _m.Called(id, newName)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(int64, string) *models.Goal); ok {
		r0 = rf(id, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(id, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
