// Code generated by mockery v2.16.0. DO NOT EDIT.

package mockservices

import (
	models "github.com/alswl/go-toodledo/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// GoalPersistenceService is an autogenerated mock type for the GoalPersistenceService type
type GoalPersistenceService struct {
	mock.Mock
}

// Archive provides a mock function with given fields: id, isArchived
func (_m *GoalPersistenceService) Archive(id int, isArchived bool) (*models.Goal, error) {
	ret := _m.Called(id, isArchived)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(int, bool) *models.Goal); ok {
		r0 = rf(id, isArchived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(id, isArchived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clean provides a mock function with given fields:
func (_m *GoalPersistenceService) Clean() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: name
func (_m *GoalPersistenceService) Create(name string) (*models.Goal, error) {
	ret := _m.Called(name)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(string) *models.Goal); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name
func (_m *GoalPersistenceService) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: name
func (_m *GoalPersistenceService) Find(name string) (*models.Goal, error) {
	ret := _m.Called(name)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(string) *models.Goal); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *GoalPersistenceService) FindByID(id int64) (*models.Goal, error) {
	ret := _m.Called(id)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(int64) *models.Goal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *GoalPersistenceService) ListAll() ([]*models.Goal, error) {
	ret := _m.Called()

	var r0 []*models.Goal
	if rf, ok := ret.Get(0).(func() []*models.Goal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllWithArchived provides a mock function with given fields:
func (_m *GoalPersistenceService) ListAllWithArchived() ([]*models.Goal, error) {
	ret := _m.Called()

	var r0 []*models.Goal
	if rf, ok := ret.Get(0).(func() []*models.Goal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialSync provides a mock function with given fields: lastEditTime
func (_m *GoalPersistenceService) PartialSync(lastEditTime *int32) error {
	ret := _m.Called(lastEditTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(*int32) error); ok {
		r0 = rf(lastEditTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: name, newName
func (_m *GoalPersistenceService) Rename(name string, newName string) (*models.Goal, error) {
	ret := _m.Called(name, newName)

	var r0 *models.Goal
	if rf, ok := ret.Get(0).(func(string, string) *models.Goal); ok {
		r0 = rf(name, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Goal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields:
func (_m *GoalPersistenceService) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGoalPersistenceService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoalPersistenceService creates a new instance of GoalPersistenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoalPersistenceService(t mockConstructorTestingTNewGoalPersistenceService) *GoalPersistenceService {
	mock := &GoalPersistenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
