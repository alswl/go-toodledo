// Code generated by mockery v2.9.4. DO NOT EDIT.

package mockservices

import (
	enums "github.com/alswl/go-toodledo/pkg/models/enums"
	mock "github.com/stretchr/testify/mock"

	models "github.com/alswl/go-toodledo/pkg/models"

	time "time"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// FindById provides a mock function with given fields: id
func (_m *TaskService) FindById(id int64) (*models.Task, error) {
	ret := _m.Called(id)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(int64) *models.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryAll provides a mock function with given fields:
func (_m *TaskService) QueryAll() ([]*models.Task, *models.PaginatedInfo, error) {
	ret := _m.Called()

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func() []*models.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 *models.PaginatedInfo
	if rf, ok := ret.Get(1).(func() *models.PaginatedInfo); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.PaginatedInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryModifiedTimeIn provides a mock function with given fields: before, after, start, limit, fields
func (_m *TaskService) QueryModifiedTimeIn(before time.Time, after time.Time, start int, limit int, fields []enums.TaskField) ([]*models.Task, int, error) {
	ret := _m.Called(before, after, start, limit, fields)

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, int, []enums.TaskField) []*models.Task); ok {
		r0 = rf(before, after, start, limit, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(time.Time, time.Time, int, int, []enums.TaskField) int); ok {
		r1 = rf(before, after, start, limit, fields)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(time.Time, time.Time, int, int, []enums.TaskField) error); ok {
		r2 = rf(before, after, start, limit, fields)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
