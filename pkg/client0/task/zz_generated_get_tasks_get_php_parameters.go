// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	ccontext "context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTasksGetPhpParams creates a new GetTasksGetPhpParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTasksGetPhpParams() *GetTasksGetPhpParams {
	return &GetTasksGetPhpParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTasksGetPhpParamsWithTimeout creates a new GetTasksGetPhpParams object
// with the ability to set a timeout on a request.
func NewGetTasksGetPhpParamsWithTimeout(timeout time.Duration) *GetTasksGetPhpParams {
	return &GetTasksGetPhpParams{
		timeout: timeout,
	}
}

// NewGetTasksGetPhpParamsWithContext creates a new GetTasksGetPhpParams object
// with the ability to set a context for a request.
func NewGetTasksGetPhpParamsWithContext(ctx ccontext.Context) *GetTasksGetPhpParams {
	return &GetTasksGetPhpParams{
		Context: ctx,
	}
}

// NewGetTasksGetPhpParamsWithHTTPClient creates a new GetTasksGetPhpParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTasksGetPhpParamsWithHTTPClient(client *http.Client) *GetTasksGetPhpParams {
	return &GetTasksGetPhpParams{
		HTTPClient: client,
	}
}

/*
GetTasksGetPhpParams contains all the parameters to send to the API endpoint

	for the get tasks get php operation.

	Typically these are written to a http.Request.
*/
type GetTasksGetPhpParams struct {

	/* After.

	   A GMT unix timestamp. Used to find tasks with a modified date and time before this date and time.
	*/
	After *int64

	/* Before.

	   A GMT unix timestamp. Used to find tasks with a modified date and time before this date and time.
	*/
	Before *int64

	/* Comp.

	   Boolean (0 or 1). Set to 0 to find only uncompleted tasks. Set to 1 to find only completed tasks. Omit variable, or set to -1 to retrieve both completed and uncompleted tasks.
	*/
	Comp *int64

	/* Fields.

	   A comma separated list of optional fields that you want returned. For efficiency, you should omit fields that you don't use. This will make downloading, parsing and syncing go much faster.
	*/
	Fields *string

	// ID.
	ID *int64

	// Num.
	Num *int64

	// Start.
	Start *int64

	timeout    time.Duration
	Context    ccontext.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tasks get php params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTasksGetPhpParams) WithDefaults() *GetTasksGetPhpParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tasks get php params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTasksGetPhpParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get tasks get php params
func (o *GetTasksGetPhpParams) WithTimeout(timeout time.Duration) *GetTasksGetPhpParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tasks get php params
func (o *GetTasksGetPhpParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tasks get php params
func (o *GetTasksGetPhpParams) WithContext(ctx ccontext.Context) *GetTasksGetPhpParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tasks get php params
func (o *GetTasksGetPhpParams) SetContext(ctx ccontext.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tasks get php params
func (o *GetTasksGetPhpParams) WithHTTPClient(client *http.Client) *GetTasksGetPhpParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tasks get php params
func (o *GetTasksGetPhpParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get tasks get php params
func (o *GetTasksGetPhpParams) WithAfter(after *int64) *GetTasksGetPhpParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get tasks get php params
func (o *GetTasksGetPhpParams) SetAfter(after *int64) {
	o.After = after
}

// WithBefore adds the before to the get tasks get php params
func (o *GetTasksGetPhpParams) WithBefore(before *int64) *GetTasksGetPhpParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get tasks get php params
func (o *GetTasksGetPhpParams) SetBefore(before *int64) {
	o.Before = before
}

// WithComp adds the comp to the get tasks get php params
func (o *GetTasksGetPhpParams) WithComp(comp *int64) *GetTasksGetPhpParams {
	o.SetComp(comp)
	return o
}

// SetComp adds the comp to the get tasks get php params
func (o *GetTasksGetPhpParams) SetComp(comp *int64) {
	o.Comp = comp
}

// WithFields adds the fields to the get tasks get php params
func (o *GetTasksGetPhpParams) WithFields(fields *string) *GetTasksGetPhpParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get tasks get php params
func (o *GetTasksGetPhpParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithID adds the id to the get tasks get php params
func (o *GetTasksGetPhpParams) WithID(id *int64) *GetTasksGetPhpParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get tasks get php params
func (o *GetTasksGetPhpParams) SetID(id *int64) {
	o.ID = id
}

// WithNum adds the num to the get tasks get php params
func (o *GetTasksGetPhpParams) WithNum(num *int64) *GetTasksGetPhpParams {
	o.SetNum(num)
	return o
}

// SetNum adds the num to the get tasks get php params
func (o *GetTasksGetPhpParams) SetNum(num *int64) {
	o.Num = num
}

// WithStart adds the start to the get tasks get php params
func (o *GetTasksGetPhpParams) WithStart(start *int64) *GetTasksGetPhpParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get tasks get php params
func (o *GetTasksGetPhpParams) SetStart(start *int64) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetTasksGetPhpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter int64

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := swag.FormatInt64(qrAfter)
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore int64

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := swag.FormatInt64(qrBefore)
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Comp != nil {

		// query param comp
		var qrComp int64

		if o.Comp != nil {
			qrComp = *o.Comp
		}
		qComp := swag.FormatInt64(qrComp)
		if qComp != "" {

			if err := r.SetQueryParam("comp", qComp); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Num != nil {

		// query param num
		var qrNum int64

		if o.Num != nil {
			qrNum = *o.Num
		}
		qNum := swag.FormatInt64(qrNum)
		if qNum != "" {

			if err := r.SetQueryParam("num", qNum); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
