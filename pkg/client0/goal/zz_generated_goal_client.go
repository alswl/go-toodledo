// Code generated by go-swagger; DO NOT EDIT.

package goal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new goal API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for goal API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetGoalsGetPhp(params *GetGoalsGetPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoalsGetPhpOK, error)

	PostGoalsAddPhp(params *PostGoalsAddPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsAddPhpOK, error)

	PostGoalsDeletePhp(params *PostGoalsDeletePhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsDeletePhpOK, error)

	PostGoalsEditPhp(params *PostGoalsEditPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsEditPhpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetGoalsGetPhp get goals get php API
*/
func (a *Client) GetGoalsGetPhp(params *GetGoalsGetPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoalsGetPhpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoalsGetPhpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGoalsGetPhp",
		Method:             "GET",
		PathPattern:        "/goals/get.php",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoalsGetPhpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoalsGetPhpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGoalsGetPhp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGoalsAddPhp post goals add php API
*/
func (a *Client) PostGoalsAddPhp(params *PostGoalsAddPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsAddPhpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGoalsAddPhpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGoalsAddPhp",
		Method:             "POST",
		PathPattern:        "/goals/add.php",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGoalsAddPhpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGoalsAddPhpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGoalsAddPhp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGoalsDeletePhp post goals delete php API
*/
func (a *Client) PostGoalsDeletePhp(params *PostGoalsDeletePhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsDeletePhpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGoalsDeletePhpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGoalsDeletePhp",
		Method:             "POST",
		PathPattern:        "/goals/delete.php",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGoalsDeletePhpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGoalsDeletePhpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGoalsDeletePhp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGoalsEditPhp post goals edit php API
*/
func (a *Client) PostGoalsEditPhp(params *PostGoalsEditPhpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostGoalsEditPhpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGoalsEditPhpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGoalsEditPhp",
		Method:             "POST",
		PathPattern:        "/goals/edit.php",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGoalsEditPhpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGoalsEditPhpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGoalsEditPhp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
