// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SavedSearch saved search
//
// swagger:model SavedSearch
type SavedSearch struct {

	// Indicates the state of the "Match" option for a search. There are two possible values. "All" means that all the root rules and groups must match (The outer boolean will be AND and the inner boolean will be OR). "Any" means that only one of the root rules or groups must match (The outer boolean will be OR and the inner boolean will be AND).
	Bool string `json:"bool,omitempty"`

	// The id number of the saved search. This is unique per user, but two different users may have different searches with the same id.
	ID int64 `json:"id,omitempty"`

	// The display name for the saved search, up to 32 characters.
	Name string `json:"name,omitempty"`

	// In the JSON return format, this contains the nested rules for the saved search. Each group will have a numerical index (which may or may not be consecutive). Order does not matter.
	Search map[string]SearchGroup `json:"search,omitempty"`
}

// Validate validates this saved search
func (m *SavedSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SavedSearch) validateSearch(formats strfmt.Registry) error {
	if swag.IsZero(m.Search) { // not required
		return nil
	}

	for k := range m.Search {

		if val, ok := m.Search[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this saved search based on the context it is used
func (m *SavedSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SavedSearch) contextValidateSearch(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Search {

		if val, ok := m.Search[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SavedSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SavedSearch) UnmarshalBinary(b []byte) error {
	var res SavedSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
