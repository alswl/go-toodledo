// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	ccontext "context"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Account account
//
// swagger:model Account
type Account struct {

	// The user's display name on the website.
	Alias string `json:"alias,omitempty"`

	// The user's prefered format for representing dates. (0=M D, Y, 1=M/D/Y, 2=D/M/Y, 3=Y-M-D)
	Dateformat int32 `json:"dateformat,omitempty"`

	// The user's login email address.
	Email string `json:"email,omitempty"`

	// If the task is due this many months into the future, the user wants them to be hidde
	Hidemonths int32 `json:"hidemonths,omitempty"`

	// The due date lead-time by which tasks should will appear on the hotlist.
	Hotlistduedate int32 `json:"hotlistduedate,omitempty"`

	// The priority value above which tasks should appear on the hotlist.
	Hotlistpriority int32 `json:"hotlistpriority,omitempty"`

	// A timestamp that indicates the last time that any note was deleted from this account. You can quickly check this field to determine if you need to identify and remove notes from your application.
	LastdeleteNote int32 `json:"lastdelete_note,omitempty"`

	// A timestamp that indicates the last time that any task was deleted from this account. You can quickly check this field to determine if you need to identify and remove tasks from your application.
	LastdeleteTask int32 `json:"lastdelete_task,omitempty"`

	// A timestamp that indicates the last time that a context was added, edited or deleted. You can quickly check this field to determine if you need to refresh your cached context list.
	LasteditContext int32 `json:"lastedit_context,omitempty"`

	// A timestamp that indicates the last time that any task was added or edited on this account. You can quickly check this field to determine if you need to download updates.
	LasteditFolder int32 `json:"lastedit_folder,omitempty"`

	// A timestamp that indicates the last time that a goal was edited, edited or deleted. You can quickly check this field to determine if you need to refresh your cached goal list.
	LasteditGoal int32 `json:"lastedit_goal,omitempty"`

	// A timestamp that indicates the last time that any list was edited on this account. You can quickly check this field to determine if you need to sync lists.
	LasteditList int32 `json:"lastedit_list,omitempty"`

	// A timestamp that indicates the last time that a context was added, edited or deleted. You can quickly check this field to determine if you need to refresh your cached context list.
	LasteditLocation int32 `json:"lastedit_location,omitempty"`

	// A timestamp that indicates the last time that any note was added or edited on this account. You can quickly check this field to determine if you need to download updates.
	LasteditNote int32 `json:"lastedit_note,omitempty"`

	// A timestamp that indicates the last time that any outline was edited on this account. You can quickly check this field to determine if you need to sync outlines.
	LasteditOutline int32 `json:"lastedit_outline,omitempty"`

	// A timestamp that indicates the last time that any task was added or edited on this account. You can quickly check this field to determine if you need to download updates.
	LasteditTask int32 `json:"lastedit_task,omitempty"`

	// Whether or not the user is a Silver or Gold Subscriber. You need to know this if you want to use subtasks. A value of 0 means a free account. 1 means Silver and 2 means Gold or higher.
	Pro int32 `json:"pro,omitempty"`

	// The user's preference for viewing counters showing the number of tasks in each section.
	Showtabnums int32 `json:"showtabnums,omitempty"`

	// The number of half hours that the user's timezone is offset from the server's timezone. A value of -4 means that the user's timezone is 2 hours earlier than the server's timezone. The server is in the Eastern Standard Timezone.
	Timezone int32 `json:"timezone,omitempty"`

	// A unique string that identifies the user. You will need to store this and compare when a user re-authenticates their account to make sure you are syncing with the same account.
	Userid string `json:"userid,omitempty"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this account based on context it is used
func (m *Account) ContextValidate(ctx ccontext.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
