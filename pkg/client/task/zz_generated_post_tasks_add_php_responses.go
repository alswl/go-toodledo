// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/alswl/go-toodledo/pkg/models"
)

// PostTasksAddPhpReader is a Reader for the PostTasksAddPhp structure.
type PostTasksAddPhpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTasksAddPhpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTasksAddPhpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostTasksAddPhpUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostTasksAddPhpTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostTasksAddPhpServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostTasksAddPhpOK creates a PostTasksAddPhpOK with default headers values
func NewPostTasksAddPhpOK() *PostTasksAddPhpOK {
	return &PostTasksAddPhpOK{}
}

/* PostTasksAddPhpOK describes a response with status code 200, with default header values.

ok
*/
type PostTasksAddPhpOK struct {
	Payload []*models.Task
}

// Error ...
func (o *PostTasksAddPhpOK) Error() string {
	return fmt.Sprintf("[POST /tasks/add.php][%d] postTasksAddPhpOK  %+v", 200, o.Payload)
}

// GetPayload ...
func (o *PostTasksAddPhpOK) GetPayload() []*models.Task {
	return o.Payload
}

func (o *PostTasksAddPhpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksAddPhpUnauthorized creates a PostTasksAddPhpUnauthorized with default headers values
func NewPostTasksAddPhpUnauthorized() *PostTasksAddPhpUnauthorized {
	return &PostTasksAddPhpUnauthorized{}
}

/* PostTasksAddPhpUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostTasksAddPhpUnauthorized struct {
	Payload *models.Error
}

// Error ...
func (o *PostTasksAddPhpUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tasks/add.php][%d] postTasksAddPhpUnauthorized  %+v", 401, o.Payload)
}

// GetPayload ...
func (o *PostTasksAddPhpUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksAddPhpUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksAddPhpTooManyRequests creates a PostTasksAddPhpTooManyRequests with default headers values
func NewPostTasksAddPhpTooManyRequests() *PostTasksAddPhpTooManyRequests {
	return &PostTasksAddPhpTooManyRequests{}
}

/* PostTasksAddPhpTooManyRequests describes a response with status code 429, with default header values.

TooManyRequests
*/
type PostTasksAddPhpTooManyRequests struct {
	Payload *models.Error
}

// Error ...
func (o *PostTasksAddPhpTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /tasks/add.php][%d] postTasksAddPhpTooManyRequests  %+v", 429, o.Payload)
}

// GetPayload ...
func (o *PostTasksAddPhpTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksAddPhpTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTasksAddPhpServiceUnavailable creates a PostTasksAddPhpServiceUnavailable with default headers values
func NewPostTasksAddPhpServiceUnavailable() *PostTasksAddPhpServiceUnavailable {
	return &PostTasksAddPhpServiceUnavailable{}
}

/* PostTasksAddPhpServiceUnavailable describes a response with status code 503, with default header values.

ServiceUnavailable
*/
type PostTasksAddPhpServiceUnavailable struct {
	Payload *models.Error
}

// Error ...
func (o *PostTasksAddPhpServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /tasks/add.php][%d] postTasksAddPhpServiceUnavailable  %+v", 503, o.Payload)
}

// GetPayload ...
func (o *PostTasksAddPhpServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostTasksAddPhpServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
