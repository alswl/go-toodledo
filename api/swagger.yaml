swagger: '2.0'
info:
  description: >-
    API Swagger for Toodledo, document link:
    https://api.toodledo.com/3/index.php , powered by @alswl
  version: 3.0.0
  title: Swagger Toodledo
  contact:
    email: alswlx@gmail.com
externalDocs:
  description: Official toodledo API documents
  url: https://api.toodledo.com/3/index.php
host: api.toodledo.com
basePath: /3
tags:
  - name: account
  - name: folder
  - name: context
  - name: goal
  - name: location
  - name: task
  - name: saved search
  - name: note
  - name: list
schemes:
  - https
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://api.toodledo.com/3/account/authorize.php
    tokenUrl: https://api.toodledo.com/3/account/token.php
    scopes:
      read: Grants read access
      write: Grants write access
paths:
  /account/get.php:
    get:
      tags:
        - account
      security:
        - OAuth2:
            - read
            - write
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/Account'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /folders/get.php:
    get:
      tags:
        - folder
      security:
        - OAuth2:
            - read
            - write
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /folders/add.php:
    post:
      tags:
        - folder
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: name
          required: true
        - in: query
          name: private
          type: integer
          required: false
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /folders/edit.php:
    post:
      tags:
        - folder
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: id
          required: true
        - in: query
          type: string
          name: name
        - in: query
          name: private
          type: integer
        - in: query
          name: archived
          type: integer
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /folders/delete.php:
    post:
      tags:
        - folder
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: id
          type: integer
          required: true
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties:
              deleted:
                type: integer
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /contexts/get.php:
    get:
      tags:
        - context
      security:
        - OAuth2:
            - read
            - write
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Context'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /contexts/add.php:
    post:
      tags:
        - context
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: name
          required: true
        - in: query
          name: private
          type: integer
          required: false
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Context'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /contexts/edit.php:
    post:
      tags:
        - context
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: id
          required: true
        - in: query
          type: string
          name: name
        - in: query
          name: private
          type: integer
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Context'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /contexts/delete.php:
    post:
      tags:
        - context
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: id
          type: integer
          required: true
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties:
              deleted:
                type: integer
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /goals/get.php:
    get:
      tags:
        - goal
      security:
        - OAuth2:
            - read
            - write
      produces:
        - application/json
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Goal'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /goals/add.php:
    post:
      tags:
        - goal
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: name
          required: true
        - in: query
          type: integer
          name: level
        - in: query
          type: integer
          name: contributes
        - in: query
          name: private
          type: integer
        - in: query
          type: string
          name: note
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Goal'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /goals/edit.php:
    post:
      tags:
        - goal
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: id
          required: true
        - in: query
          type: string
          name: name
        - in: query
          type: integer
          name: level
        - in: query
          type: integer
          name: contributes
        - in: query
          name: archived
          type: integer
        - in: query
          name: private
          type: integer
        - in: query
          type: string
          name: note
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Goal'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /goals/delete.php:
    post:
      tags:
        - goal
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: id
          type: integer
          required: true
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties:
              deleted:
                type: integer
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /tasks/get.php:
    get:
      tags:
        - task
      security:
        - OAuth2:
            - read
            - write
      produces:
        - application/json
      parameters:
        - in: query
          name: before
          type: integer
          description: >-
            A GMT unix timestamp. Used to find tasks with a modified date and
            time before this date and time.
        - in: query
          name: after
          type: integer
          description: >-
            A GMT unix timestamp. Used to find tasks with a modified date and
            time before this date and time.
        - in: query
          name: comp
          type: integer
          description: >-
            Boolean (0 or 1). Set to 0 to find only uncompleted tasks. Set to 1
            to find only completed tasks. Omit variable, or set to -1 to
            retrieve both completed and uncompleted tasks.
        - in: query
          name: id
          type: integer
        - in: query
          name: start
          type: integer
        - in: query
          name: num
          type: integer
        - in: query
          name: fields
          type: string
          description: >-
            A comma separated list of optional fields that you want returned.
            For efficiency, you should omit fields that you don't use. This will
            make downloading, parsing and syncing go much faster.
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/PaginatedApiResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /tasks/add.php:
    post:
      tags:
        - task
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: tasks
          description: Array of tasks, should be put json string
        - in: query
          type: string
          name: fields
          description: >-
            A comma separated list of optional fields that you want returned.
            For efficiency, you should omit fields that you don't use. This will
            make downloading, parsing and syncing go much faster.
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
  /tasks/delete.php:
    post:
      tags:
        - task
      security:
        - OAuth2:
            - read
            - write
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          type: string
          name: tasks
          description: Array of tasks, should be put json string
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskDeleteItem'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '429':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: ServiceUnavailable
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    properties:
      errorCode:
        type: integer
      errorDesc:
        type: string
    required:
      - errorCode
      - errorDesc
  Account:
    type: object
    properties:
      userid:
        type: string
        description: >-
          A unique string that identifies the user. You will need to store this
          and compare when a user re-authenticates their account to make sure
          you are syncing with the same account.
      alias:
        type: string
        description: The user's display name on the website.
      email:
        type: string
        description: The user's login email address.
      pro:
        type: integer
        format: int32
        description: >-
          Whether or not the user is a Silver or Gold Subscriber. You need to
          know this if you want to use subtasks. A value of 0 means a free
          account. 1 means Silver and 2 means Gold or higher.
      dateformat:
        type: integer
        format: int32
        description: >-
          The user's prefered format for representing dates. (0=M D, Y, 1=M/D/Y,
          2=D/M/Y, 3=Y-M-D)
      timezone:
        type: integer
        format: int32
        description: >-
          The number of half hours that the user's timezone is offset from the
          server's timezone. A value of -4 means that the user's timezone is 2
          hours earlier than the server's timezone. The server is in the Eastern
          Standard Timezone.
      hidemonths:
        type: integer
        format: int32
        description: >-
          If the task is due this many months into the future, the user wants
          them to be hidde
      hotlistpriority:
        type: integer
        format: int32
        description: The priority value above which tasks should appear on the hotlist.
      hotlistduedate:
        type: integer
        format: int32
        description: >-
          The due date lead-time by which tasks should will appear on the
          hotlist.
      showtabnums:
        type: integer
        format: int32
        description: >-
          The user's preference for viewing counters showing the number of tasks
          in each section.
      lastedit_folder:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any task was added or
          edited on this account. You can quickly check this field to determine
          if you need to download updates.
      lastedit_context:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that a context was added,
          edited or deleted. You can quickly check this field to determine if
          you need to refresh your cached context list.
      lastedit_goal:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that a goal was edited,
          edited or deleted. You can quickly check this field to determine if
          you need to refresh your cached goal list.
      lastedit_location:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that a context was added,
          edited or deleted. You can quickly check this field to determine if
          you need to refresh your cached context list.
      lastedit_task:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any task was added or
          edited on this account. You can quickly check this field to determine
          if you need to download updates.
      lastdelete_task:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any task was deleted
          from this account. You can quickly check this field to determine if
          you need to identify and remove tasks from your application.
      lastedit_note:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any note was added or
          edited on this account. You can quickly check this field to determine
          if you need to download updates.
      lastdelete_note:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any note was deleted
          from this account. You can quickly check this field to determine if
          you need to identify and remove notes from your application.
      lastedit_list:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any list was edited on
          this account. You can quickly check this field to determine if you
          need to sync lists.
      lastedit_outline:
        type: integer
        format: int32
        description: >-
          A timestamp that indicates the last time that any outline was edited
          on this account. You can quickly check this field to determine if you
          need to sync outlines.
  Folder:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      private:
        type: integer
      archived:
        type: integer
      ord:
        type: integer
  Context:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      private:
        type: integer
  Goal:
    type: object
    properties:
      id:
        type: integer
      level:
        type: integer
      contributes:
        type: integer
      name:
        type: string
      archived:
        type: integer
      private:
        type: integer
      note:
        type: string
  Task:
    type: object
    properties:
      id:
        type: integer
        description: >-
          The server id number for this task. It is guaranteed to be unique per
          account, but two different accounts may have two different tasks with
          the same id number.
      title:
        type: string
        description: A string for the name of the task. Up to 255 characters.
      tag:
        type: string
        description: >-
          A comma separated string listing the tags assigned to this task. Up to
          250 characters.
      folder:
        type: integer
        description: >-
          The id number of the folder. Omit this field or set it to 0 to leave
          the task unassigned to a folder.
      context:
        type: integer
        description: >-
          The id number of the context. Omit this field or set it to 0 to leave
          the task unassigned to a context.
      goal:
        type: integer
        description: >-
          The id number of the goal. Omit this field or set it to 0 to leave the
          task unassigned to a goal.
      location:
        type: integer
        description: >-
          The id number of the location. Omit this field or set it to 0 to leave
          the task unassigned to a location.
      parent:
        type: integer
        description: >-
          This is used with Subscriptions that have access to subtasks. To
          create a subtask, set this to the id number of the parent task. The
          default is 0, which creates a normal task.
      children:
        type: integer
        description: >-
          This is used with Subscriptions that have access to subtasks. This
          will indicate the number of child tasks that this task has. This will
          be 0 for subtasks or for regular tasks without subtasks.
      order:
        type: integer
        description: >-
          This is used with Subscriptions that have access to subtasks. This is
          an integer that indicates the manual order of subtasks within the
          parent task. Currently this is read-only.
      duedate:
        type: integer
        description: >-
          A GMT unix timestamp for when the task is due. The time component of
          this timestamp doesn't matter. When fetching from the server, it will
          always be noon.
      duedatemod:
        type: integer
        description: |
          An integer representing the due date modifier.
          0 = Due By
          1 = Due On (=)
          2 = Due After (>)
          3 = Optionally (?)
      startdate:
        type: integer
        description: >-
          A GMT unix timestamp for when the task starts. The time component of
          this timestamp will always be noon.
      duetime:
        type: integer
        description: >-
          A GMT unix timestamp for when the task is due. If the task does not
          have a time set, then this will be 0. If the task has a duetime
          without a duedate set, then the date component of this timestamp will
          be Jan 1, 1970. Times are stored as floating times. In other words,
          10am is always 10am, regardless of your timezone. You can convert this
          timestamp to a GMT string and display the time component without
          worrying about timezones.
      starttime:
        type: integer
        description: >-
          A GMT unix timestamp for when the task starts. If the task does not
          have a time set, then this will be 0. If the task has a starttime
          without a startdate set, then the date component of this timestamp
          will be Jan 1, 1970. Times are stored as floating times. In other
          words, 10am is always 10am, regardless of your timezone. You can
          convert this timestamp to a GMT string and display the time component
          without worrying about timezones.
      remind:
        type: integer
        description: >-
          An integer that represents the number of minutes prior to the
          duedate/time that a reminder will be sent. Set it to 0 for no
          reminder. Values will be constrained to this list of valid numbers (0,
          1, 15, 30, 45, 60, 90, 120, 180, 240, 1440, 2880, 4320, 5760, 7200,
          8640, 10080, 20160, 43200). Additionally, if the user does not have a
          Subscription, the only valid numbers are 0,60. If you submit an
          invalid number, it will be rounded up or down to a valid non zero
          value.
      repeat:
        type: string
        description: >
          A string indicating how the task repeats. When a task is rescheduled,
          it is moved forward to the new date. For record keeping purposes, a
          completed copy of this task will be added to the user's list. It will
          have a new ID number and will be already completed. To make a task no
          longer repeat, set this field to an empty string.


          This string is in the standard iCal RRULE format. For example:
          "FREQ=DAILY" or "FREQ=WEEKLY;BYDAY=TU". Not every valid iCal RRULE is
          understood by Toodledo, but we will be improving our ability to
          understand more options in the future. Please read our repeat format
          FAQ for details about how we can currently repeat tasks. Note that
          users enter their repeat settings using a GUI or by typing a human
          readable string. These get converted to iCal rules behind the scenes.


          There are three enhancements to the iCal RRULE format that we have
          made to support some advanced Toodledo features.

          Subtasks can repeat based on their parent's repeat value. There is not
          a comparable iCal RRULE for this, so we have a custom RRULE of
          "PARENT" to indicate this setting.

          Tasks can be set to repeat from their due-date or their completion
          date. There is not a way to indicate this in a standard iCAL RRULE. To
          indicate this, we have a custom string of ";FROMCOMP" that we append
          to the RRULE if the task is set to repeat from the completion date.
          The absence of this string means that the task repeats from the
          due-date.

          Normally, when a task is rescheduled it moves forwards by 1
          occurrence. If the user has procrastinated, the new due-date could
          still be in the past. Toodledo will have the option to indicate that
          certain repeating tasks should be rescheduled to the next future
          occurance of the task. If this is the case, the custom ";FASTFORWARD"
          string will be appended to the RRULE.      
      status:
        type: integer
        description: |
          An integer that represents the status of the task.
          0 = None
          1 = Next Action
          2 = Active
          3 = Planning
          4 = Delegated
          5 = Waiting
          6 = Hold
          7 = Postponed
          8 = Someday
          9 = Canceled
          10 = Reference
      length:
        type: integer
        description: >-
          An integer representing the number of minutes that the task will take
          to complete.
      priority:
        type: integer
        description: |
          An integer that represents the priority.
          -1 = Negative
          0 = Low
          1 = Medium
          2 = High
          3 = Top
      star:
        type: integer
        description: A boolean (0 or 1) that indicates if the task has a star or not.
      modified:
        type: integer
        description: A GMT unix timestamp for when the task was last modified.
      completed:
        type: integer
        description: >-
          A GMT unix timestamp for when the task was completed. If the task is
          not completed, the value will be 0. Toodledo does not track the time
          that a task was completed, so tasks will always appear to be completed
          at noon.
      added:
        type: integer
        description: A GMT unix timestamp for when the task was last modified.
      timer:
        type: integer
        description: >-
          The value in the timer field indicates the number of seconds that have
          elapsed for the timer not including the current session.
      timerone:
        type: integer
        description: >-
          If the timer is currently on, this will contain a unix timestamp
          indicating the last time that the timer was started. Therefore, if the
          timer is currently on, you will need to calculate the elapsed time
          when you present it to the user. This calculation is: Total
          Time=timer+(now-timeron). Where "now" is a unix timestamp for the
          current time.
      note:
        type: string
        description: A text string up to 32,000 bytes long. New lines should be sent as \n.
      meta:
        type: string
        description: >-
          A text string up to 1024 bytes long for storing metadata about the
          task. This is useful for syncing data that cannot otherwise be synced
          to Toodledo. This data is unique per task ID. This data is private to
          your App ID. Neither the user, nor other App IDs can see the data that
          you put in here. Because of an implementation detail, using the meta
          field introduces extra latency to each API call, so you should only
          use this field when necessary.
      previous:
        type: integer
        description: >-
          If the task was repeated from another task, this will contain the id
          number of the previous version of this task.
      shared:
        type: integer
        description: >-
          A boolean (0 or 1) that indicates if the task is shared as a joint
          task (Subscription required for user). Read only.
      sharedowner:
        type: integer
        description: >-
          The user id of the person who owns the task that is being shared with
          the current user. If the current user is not the owner, then they
          cannot make changes to the collaboration settings for this task,
          although they can make other changes. Read only.
      sharedwith:
        type: integer
        description: >-
          An array of user ids for people that this task is shared with, other
          than myself and the owner. Read only.
      addedby:
        type: integer
        description: >-
          The user id of the collaborator who assigned the task (Subscription
          required for user).
      via:
        type: string
        description: >
          A read-only field that indicates how the task was added. These are the
          possible values:

          0: Main website

          1: Email Import

          2: Firefox Addon

          3: This API

          4: Widgets (Google Gadget, etc)

          5: Not used

          6: Mobile Phone

          7: iPhone App

          8: Import Tools

          9: Twitter
      attatchment:
        type: string
        description: >
          An array of attachment items. Each item will contain the following
          three fields. Attachments are currently read only. You can use the id
          number to reference the outline, list or note that you can get via
          this API. File's are not currently readable, but we plan to add this
          functionality soon.

          id: The unique id number for the attachment

          kind: The kind of attachment (file,note,outline,list)

          name: The display name of the attachment
      ref:
        type: string
        description: >-
          A read-only field that contains the id number of the task that this
          task is a reference to. This is useful for tasks that are created
          from another task.
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
      type:
        type: string
      message:
        type: string
  PaginatedInfo:
    type: object
    properties:
      num:
        type: integer
      total:
        type: integer
  PaginatedApiResponse:
    type: array
    items:
      type: object
  TaskDeleteItem:
    type: object
    properties:
      id:
        type: integer
      errorCode:
        type: integer
        description: >-
          The error code for the delete operation. This will be 0 if the
          delete was successful.
      errorDesc:
        type: string
        description: >-
          The error description for the delete operation. This will be empty if
          the delete was successful.
      ref:
        type: string
        description: >-
          A read-only field that contains the id number of the task that this
          task is a reference to. This is useful for tasks that are deleted failed.